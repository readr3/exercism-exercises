// Generated by CoffeeScript 1.6.3
(function() {
  var DNA;

  DNA = require('./example');

  describe('DNA', function() {
    it('should not have adenosine if empty', function() {
      return expect(new DNA('').count('A')).toBe(0);
    });
    it('should not have any nucleotides if empty', function() {
      return expect(new DNA('').nucleotideCounts).toEqual({
        A: 0,
        T: 0,
        C: 0,
        G: 0
      });
    });
    it('should count cytidine', function() {
      return expect(new DNA('CCCCC').count('C')).toBe(5);
    });
    it('should count guanosine', function() {
      return expect(new DNA('GGGGGGGG').nucleotideCounts).toEqual({
        A: 0,
        T: 0,
        C: 0,
        G: 8
      });
    });
    it('can count just thymidine', function() {
      return expect(new DNA('GGGGGTAACCCGG').count('T')).toBe(1);
    });
    it('should be able to count again', function() {
      var dna;
      dna = new DNA('CGATTGGG');
      dna.count('T');
      return expect(dna.count('T')).toBe(2);
    });
    it('should not have uracil', function() {
      return expect(new DNA('GATTACA').count('U')).toBe(0);
    });
    it('should not change counts after trying to count uracil', function() {
      var dna;
      dna = new DNA('GATTACA');
      dna.count('U');
      return expect(dna.nucleotideCounts).toEqual({
        A: 3,
        T: 2,
        C: 1,
        G: 1
      });
    });
    it('will not accept invalid nucleotides', function() {
      return expect(function() {
        return new DNA('GACT').count('X');
      }).toThrow(new Error('Invalid Nucleotide'));
    });
    return it('counts all nucleotides', function() {
      return expect(new DNA('AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC').nucleotideCounts).toEqual({
        A: 20,
        T: 21,
        G: 17,
        C: 12
      });
    });
  });

}).call(this);
